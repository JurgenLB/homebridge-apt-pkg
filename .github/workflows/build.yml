name: "Build Packages"

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag'     
        required: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name: [
          debian-x86_64,
          debian-i386,
          debian-arm32v6,
          debian-arm64v8,
        ]
        include:
          - name: debian-x86_64
            os: ubuntu-latest
            BASE_IMAGE: library/debian:9.6-slim
            QEMU_ARCH: x86_64

          - name: debian-i386
            os: ubuntu-latest
            BASE_IMAGE: i386/debian:9.6-slim
            QEMU_ARCH: i386

          - name: debian-arm32v6
            os: ubuntu-latest
            BASE_IMAGE: balenalib/raspberry-pi-debian:stretch
            QEMU_ARCH: arm

          - name: debian-arm64v8
            os: ubuntu-latest
            BASE_IMAGE: arm64v8/debian:9.6-slim
            QEMU_ARCH: aarch64

    steps: 
    - uses: actions/checkout@v3

    # - name: Linux - Setup Dependencies
    #   if: runner.os == 'Linux'
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static
    #     docker run --rm --privileged multiarch/qemu-user-static:register --reset

    # - name: Linux - Build Docker Image
    #   if: runner.os == 'Linux'
    #   run: |
    #     docker build -f build/Dockerfile --build-arg BASE_IMAGE=${{ matrix.BASE_IMAGE }} --build-arg QEMU_ARCH=${{ matrix.QEMU_ARCH }} -t package-build .

    # - name: Linux - Build Package
    #   if: runner.os == 'Linux'
    #   run: |
    #     docker run --rm -v $(pwd):/repo package-build

    # - uses: AButler/upload-release-assets@v2.0
    #   with:
    #     files: '*.deb'
    #     repo-token: ${{ secrets.GITHUB_TOKEN }}
    #     release-tag: ${{ github.event.inputs.tag }}

  update-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Get the release
      id: get_release
      uses: cardinalby/git-get-release-action@1.2.2
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag: ${{ github.event.inputs.tag }}

    - name: Download release assets
      uses: dsaltares/fetch-gh-release-asset@0.0.8
      with:
        version: ${{ steps.get_release.outputs.id }}
        regex: true
        file: "homebridge.*\\.deb"
        target: "repo/"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Import GPG key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v4
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}

    - name: Install deb-s3
      run: |
        curl -sLO https://github.com/deb-s3/deb-s3/releases/download/0.11.3/deb-s3-0.11.3.gem
        sudo gem install deb-s3-0.11.3.gem

    - name: Update Repo
      run: |
        sudo chown -R $USER: repo/
        deb-s3 upload \
          --s3-region=us-west-2 \
          --bucket homebridge-repo \
          --access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
          --secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          --sign={{ secrets.GPG_KEY_ID }} \
          repo/*.deb

    # - name: Build Repo
    #   run: |
    #     sudo chown -R $USER: repo/
    #     cd repo
    #     dpkg-scanpackages --multiversion . > Packages
    #     gzip -k -f Packages
    #     apt-ftparchive release . > Release
    #     gpg --list-secret-keys
    #     gpg --default-key "${{ secrets.GPG_SIGNING_EMAIL }}" -abs -o - Release > Release.gpg
    #     gpg --default-key "${{ secrets.GPG_SIGNING_EMAIL }}" --clearsign -o - Release > InRelease

    - name: Test
      run: |
        pwd
        ls -la repo/

    # - name: Upload files to a GitHub release
    #   uses: svenstaro/upload-release-action@2.2.1
    #   with:
    #     tag: ${{ github.event.inputs.tag }}
    #     repo_token: ${{ secrets.GITHUB_TOKEN }}
    #     file: repo/*
    #     file_glob: true
    #     overwrite: true
