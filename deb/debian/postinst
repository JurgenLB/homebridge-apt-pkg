#!/bin/bash

# post-install and post-upgrade
if [ "$1" = "configure" ]; then
  # stop homebridge.service if it is running
  if systemctl is-active --quiet homebridge.service; then
    echo "Stopping Homebridge service..."
    systemctl stop homebridge.service 2> /dev/null
  fi
fi

# post-upgrade only
if [ "$1" = "configure" ] && [ $2 ]; then
  true
fi

if [ "$1" = "configure" ] && [ -f /tmp/homebridge-tmp/package.json ] && [ -f /var/lib/homebridge/package.json ]; then
  echo "Merging package.json file..."

  # enter homebridge env
  . "/opt/homebridge/source.sh"

  # merge the new package.json into the old one, and save
  PACKAGE_JSON=$(jq -M -s '.[0] * .[1]' /tmp/homebridge-tmp/package.json /var/lib/homebridge/package.json) > /var/lib/homebridge/package.json
  if [ "$?" = "0" ]; then
    echo $PACKAGE_JSON | jq '.' > /var/lib/homebridge/package.json
  fi

  # Re-install user plugins
  echo "Re-installing user plugins, this may take a few minutes, please wait..."
  echo ""
  pnpm -C /var/lib/homebridge install
  echo ""

  # remove tmp package.json
  rm -rf /tmp/homebridge-tmp/package.json
fi

# post-install and post-upgrade
if [ "$1" = "configure" ]; then
  echo "Running post-install steps..."

  # create user
  adduser --system homebridge 2> /dev/null

  # copy .bashrc to service user home
  cp /opt/homebridge/bashrc /home/homebridge/.bashrc

  # fix permissions on homebridge user home
  chown -R homebridge: /home/homebridge/.bashrc

  # source /etc/os-release to get OS ID
  . /etc/os-release

  # add user to default groups if running on raspbian
  if [ "$ID" = "raspbian" ]; then
    for groupName in udio bluetooth dialout gpio video input i2c spi audio render; do
      usermod -a -G $groupName homebridge 2> /dev/null
    done
  fi

  # if running on Offical Homebridge Raspberry Pi, run as the "pi" user instead
  if [ -z $2 ] && [ "$ID" = "raspbian" ] && [ -f /etc/hb-release ] && [ ! -f /etc/systemd/system/homebridge.service.d/override.conf ]; then
    getent passwd pi > /dev/null
    if [ "$?" -eq 0 ]; then
      mkdir -p /etc/systemd/system/homebridge.service.d
      echo "[Service]" > /etc/systemd/system/homebridge.service.d/override.conf
      echo "User=pi" >> /etc/systemd/system/homebridge.service.d/override.conf
      echo "Environment=\"UIX_CAN_SHUTDOWN_RESTART_HOST=1\"" >> /etc/systemd/system/homebridge.service.d/override.conf
    fi
  fi

  # clear any masks on the homebridge service
  systemctl unmask homebridge.service 2> /dev/null

  # reload systemctl
  systemctl daemon-reload

  # enable systemctl service
  systemctl enable homebridge.service

  # start / restart homebridge
  echo "Starting Homebridge service...."
  systemctl restart homebridge.service

  # create symlink to hb-shell
  ln -fs /opt/homebridge/hb-shell /usr/local/bin/hb-shell
fi

# post-install only
if [ "$1" = "configure" ] && [ -z $2 ]; then
  IP=$(hostname -I)
  PORT=8581

  # check to see if an alternate port is defined in the config
  if [ -f /var/lib/homebridge/config.json ]; then
    PORT_FROM_CONFIG=$(cat /var/lib/homebridge/config.json | jq '.platforms[] | select(.platform == "config") | .port' 2> /dev/null)
    if [ ${#PORT_FROM_CONFIG} -gt 0 ]; then
      PORT=$PORT_FROM_CONFIG
    fi
  fi

  echo ""
  echo "Homebridge Installation Complete!"
  echo "You can access the Homebridge UI via:"
  echo ""

  for ip in $IP; do
    if [[ $ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      echo "* http://$ip:$PORT"
    else
      echo "* http://[$ip]:$PORT"
    fi
  done

  echo ""
  echo "Thanks for installing Homebridge!"
  echo ""
fi

exit 0