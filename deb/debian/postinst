#!/bin/bash

# post-install and post-upgrade
if [ "$1" = "configure" ]; then
  # stop homebridge.service if it is running
  if systemctl is-active --quiet homebridge.service; then
    echo "Stopping Homebridge service..."
    systemctl stop homebridge.service 2> /dev/null
  fi
fi

# post-upgrade only
if [ "$1" = "configure" ] && [ $2 ]; then
  true
fi

if [ "$1" = "configure" ] && [ -f /tmp/homebridge-tmp/package.json ] && [ -f /var/lib/homebridge/package.json ]; then
  echo "Merging package.json file..."

  # enter homebridge env
  . "/opt/homebridge/source.sh"

  # merge the new package.json into the old one, and save
  PACKAGE_JSON=$(jq -M -s '.[0] * .[1]' /tmp/homebridge-tmp/package.json /var/lib/homebridge/package.json) > /var/lib/homebridge/package.json
  if [ "$?" = "0" ]; then
    echo $PACKAGE_JSON | jq '.' > /var/lib/homebridge/package.json
  fi

  # remove the package-lock.json
  if [ -e /var/lib/homebridge/package-lock.json ]; then
    rm -rf /var/lib/homebridge/package-lock.json
  fi

  # remove homebridge-config-ui-x from the package.json
  if [ -e /var/lib/homebridge/package.json ]; then
    if [ "$(cat /var/lib/homebridge/package.json | jq -r '.dependencies."homebridge-config-ui-x"')" != "null" ]; then
      packageJson="$(cat /var/lib/homebridge/package.json | jq -rM 'del(."dependencies"."homebridge-config-ui-x")')"
      if [ "$?" = "0" ]; then
        printf "$packageJson" > /var/lib/homebridge/package.json
        echo "Removed homebridge-config-ui-x from package.json"
      fi
    fi
  fi

  # Re-install user plugins
  echo "Refreshing user plugins, this may take a few minutes, please wait..."
  echo ""
  npm --prefix /var/lib/homebridge install
  npm --prefix /var/lib/homebridge rebuild
  echo ""

  # remove tmp package.json
  rm -rf /tmp/homebridge-tmp/package.json
fi

# post-install and post-upgrade
if [ "$1" = "configure" ]; then
  echo "Running post-install steps..."

  # create user
  adduser --system --group homebridge 2> /dev/null

  # some old versions didn't create the homebridge group
  if ! getent group homebridge > /dev/null; then
    addgroup --system homebridge 2> /dev/null
    usermod -g homebridge homebridge 2> /dev/null
  fi

  # copy .bashrc to service user home
  cp /opt/homebridge/bashrc /home/homebridge/.bashrc

  # fix permissions on homebridge user home
  chown -R homebridge: /home/homebridge/.bashrc

  # add user to default groups if running on raspbian
  if [ -f /usr/bin/raspi-config ]; then
    for groupName in udio bluetooth dialout gpio video input i2c spi audio render; do
      usermod -a -G $groupName homebridge 2> /dev/null
    done
  fi

  # on install only
  # if running on Offical Homebridge Raspberry Pi, run as the "pi" user (uid 1000) instead
  if [ -z $2 ] && [ -f /usr/bin/raspi-config ] && [ -f /etc/hb-release ] && [ ! -f /etc/systemd/system/homebridge.service.d/override.conf ]; then
    getent passwd 1000 > /dev/null
    if [ "$?" -eq 0 ]; then
      mkdir -p /etc/systemd/system/homebridge.service.d
      echo "[Service]" > /etc/systemd/system/homebridge.service.d/override.conf
      echo "User=1000" >> /etc/systemd/system/homebridge.service.d/override.conf
      echo "Environment=\"UIX_CAN_SHUTDOWN_RESTART_HOST=1\"" >> /etc/systemd/system/homebridge.service.d/override.conf
      echo "Environment=\"UIX_STORAGE_PATH=/var/lib/homebridge\"" >> /etc/systemd/system/homebridge.service.d/override.conf
    fi
  fi

  # clear any masks on the homebridge service
  systemctl unmask homebridge.service 2> /dev/null

  # reload systemctl
  systemctl daemon-reload

  # enable systemctl service
  systemctl enable homebridge.service

  # start / restart homebridge
  echo "Starting Homebridge service...."
  systemctl restart homebridge.service

  # create symlink to hb-shell
  ln -fs /opt/homebridge/hb-shell /usr/local/bin/hb-shell

  # create symlink to hb-service-shim
  ln -fs /opt/homebridge/hb-service-shim /usr/local/bin/hb-service

  # remove symlinks create by npm for global hb-service installs
  rm -rf /usr/bin/hb-service
fi

# post-install only
if [ "$1" = "configure" ] && [ -z $2 ]; then
  IP=$(hostname -I)
  PORT=8581

  # check to see if an alternate port is defined in the config
  if [ -f /var/lib/homebridge/config.json ]; then
    PORT_FROM_CONFIG=$(cat /var/lib/homebridge/config.json | jq '.platforms[] | select(.platform == "config") | .port' 2> /dev/null)
    if [ ${#PORT_FROM_CONFIG} -gt 0 ]; then
      PORT=$PORT_FROM_CONFIG
    fi
  fi

  # create ufw firewall rules
  if [ -e "/usr/sbin/ufw" ]; then
    if ufw status 2> /dev/null | head -n 1 | grep -qw "active"; then
      echo ""
      ufw allow $PORT/tcp > /dev/null
      if [ "$?" = "0" ]; then
        echo "Added local firewall rule to allow inbound traffic on port $PORT/tcp."
        echo "Run \"ufw status\" to view all active firewall rules."
      else
        echo "You may need to create a firewall rule to allow access to port $PORT/tcp before you can access the Homebridge UI."
      fi
      echo "You may need to create additional firewall rules to allow HomeKit access to the main Homebridge port and any Child Bridge ports."
    fi
  fi

  echo ""
  echo "Homebridge Installation Complete!"
  echo "You can access the Homebridge UI via:"
  echo ""

  for ip in $IP; do
    if [[ $ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      echo "* http://$ip:$PORT"
    else
      echo "* http://[$ip]:$PORT"
    fi
  done

  echo ""
  echo "Thanks for installing Homebridge!"
  echo ""
fi

exit 0
